---
import { type CollectionEntry, getCollection } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";
import Pill from "../../components/Pill.astro";
import { Icon } from "astro-icon/components";

interface Props {
  entry: CollectionEntry<"works">;
  prevEntry?: CollectionEntry<"works">;
  nextEntry?: CollectionEntry<"works">;
}

export async function getStaticPaths() {
  const work = await getCollection("works");

  work.sort(
    (a, b) =>
      new Date(a.data.publishDate).getTime() -
      new Date(b.data.publishDate).getTime()
  );

  return work.map((entry, index) => ({
    params: { slug: entry.slug },
    props: {
      entry,
      prevEntry: index > 0 ? work[index - 1] : undefined,
      nextEntry: index < work.length - 1 ? work[index + 1] : undefined,
    },
  }));
}

const { entry, prevEntry, nextEntry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <main class="wrapper sub-wrapper">
    <h1 class="title">{entry.data.title}</h1>
    <p class="description">{entry.data.description}</p>
    <div class="tags">
      {
        entry.data.tags.map((t: unknown) => {
          if (typeof t === "string") {
            return <Pill>{t}</Pill>;
          }
          return null;
        })
      }
    </div>
    <div class="content">
      {
        entry.data.img && (
          <img src={entry.data.img} alt={entry.data.img_alt || ""} />
        )
      }
      <div class="content">
        <Content />
      </div>
    </div>

    <nav class="works-nav">
      {
        prevEntry && (
          <a href={`/works/${prevEntry.slug}`} class="works-prev">
            {prevEntry.data.title}
            <Icon name="solar:arrow-right-linear" width={16} height={16} />
          </a>
        )
      }
      {
        nextEntry && (
          <a href={`/works/${nextEntry.slug}`} class="works-next">
            <Icon name="solar:arrow-left-linear" width={16} height={16} />
            {nextEntry.data.title}
          </a>
        )
      }
    </nav>
  </main>
</BaseLayout>

<style>
  .sub-wrapper {
    display: flex;
    flex-direction: column;
    max-width: 720px;
    gap: var(--sp-1);
    margin: auto;
  }

  .title {
    line-height: 1.4;
    font-weight: 700;
  }

  .tags {
    display: flex;
    gap: var(--sp-1);
    flex-wrap: wrap;
  }

  .description {
    overflow-wrap: anywhere;
  }

  h2,
  h3 {
    line-height: 1.4;
  }

  img {
    border: 1px solid var(--color-gray02);
  }

  .works-nav {
    display: flex;
    justify-content: space-between;
    flex-direction: row-reverse;
    gap: var(--sp-2);
    margin-top: var(--sp-5);
    border-bottom: 1px solid var(--color-gray02);

    a {
      display: flex;
      gap: var(--sp-xs);
      align-items: center;
      padding-bottom: var(--sp-2);
      font-size: var(--fs-xs);
      font-weight: 500;
      line-height: 1.4;
      color: var(--color-gray01);
      flex: 1;

      &:hover {
        color: var(--color-main);
      }
    }
  }

  .works-prev {
    justify-content: flex-end;
  }

  .works-next {
    justify-content: flex-start;
  }
</style>
